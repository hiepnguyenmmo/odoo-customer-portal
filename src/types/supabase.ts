// This file will be generated by the Supabase CLI
// Run 'supabase gen types typescript --project-id "your-project-id" --schema public > src/types/supabase.ts'
// For now, we'll add a basic placeholder type
export type Database = {
  public: {
    Tables: {
      users: {
        Row: {
          id: string; // auth.users UUID
          email: string;
          created_at: string;
          role: 'customer' | 'admin';
        };
        Insert: {
          id?: string; // auth.users UUID
          email: string;
          created_at?: string;
          role?: 'customer' | 'admin';
        };
        Update: {
          id?: string; // auth.users UUID
          email?: string;
          created_at?: string;
          role?: 'customer' | 'admin';
        };
      };
      orders: {
        Row: {
          id: string; // Odoo Order ID or Supabase UUID
          user_id: string; // auth.users UUID
          order_date: string;
          total_amount: number;
          status: string;
          odoo_order_id: number; // Link to Odoo
          created_at: string;
        };
        Insert: {
          id?: string; // Odoo Order ID or Supabase UUID
          user_id: string; // auth.users UUID
          order_date: string;
          total_amount: number;
          status: string;
          odoo_order_id: number; // Link to Odoo
          created_at?: string;
        };
        Update: {
          id?: string; // Odoo Order ID or Supabase UUID
          user_id?: string; // auth.users UUID
          order_date?: string;
          total_amount?: number;
          status?: string;
          odoo_order_id?: number; // Link to Odoo
          created_at?: string;
        };
      };
      feedback: {
        Row: {
          id: string; // UUID
          user_id: string; // auth.users UUID
          order_id: string | null; // Link to orders table (optional)
          rating: number; // 1-5
          comment: string | null;
          created_at: string;
        };
        Insert: {
          id?: string; // UUID
          user_id: string; // auth.users UUID
          order_id?: string | null; // Link to orders table (optional)
          rating: number; // 1-5
          comment?: string | null;
          created_at?: string;
        };
        Update: {
          id?: string; // UUID
          user_id?: string; // auth.users UUID
          order_id?: string | null; // Link to orders table (optional)
          rating?: number; // 1-5
          comment?: string | null;
          created_at?: string;
        };
      };
      rewards: {
        Row: {
          id: string; // UUID
          user_id: string; // auth.users UUID
          points: number;
          last_updated: string;
          odoo_crm_link: string | null; // Link to Odoo CRM record
          created_at: string;
        };
        Insert: {
          id?: string; // UUID
          user_id: string; // auth.users UUID
          points: number;
          last_updated?: string;
          odoo_crm_link?: string | null; // Link to Odoo CRM record
          created_at?: string;
        };
        Update: {
          id?: string; // UUID
          user_id?: string; // auth.users UUID
          points?: number;
          last_updated?: string;
          odoo_crm_link?: string | null; // Link to Odoo CRM record
          created_at?: string;
        };
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
};
